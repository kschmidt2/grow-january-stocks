function drawHighcharts(){Highcharts.chart("chart-container-january-stocks",{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:0,spacingTop:20},title:{text:null},series:[{name:"Final 11 months",data:[29.9,5.7,-34.5,35,17.1,15.5,2.5,15.4,16.4],pointPadding:-.4,pointPlacement:-.15},{name:"January",data:[-2.7,-2.5,-6.1,-8.6,-3.7,-3.6,-3.1,-5.1,-.2,-1.1],pointPadding:.2,pointPlacement:.2}],plotOptions:{series:{groupPadding:.1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,y:-10,reversed:!0},xAxis:{labels:{style:{whiteSpace:"nowrap"}},categories:[2003,2005,2008,2009,2010,2014,2015,2016,2020,2021],tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-40,max:40,tickAmount:9},credits:{enabled:!1},tooltip:{shadow:!1,padding:10},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZHJhd0hpZ2hjaGFydHMiLCJIaWdoY2hhcnRzIiwiY2hhcnQiLCJ0eXBlIiwic3R5bGVkTW9kZSIsInNwYWNpbmdCb3R0b20iLCJzcGFjaW5nUmlnaHQiLCJzcGFjaW5nTGVmdCIsInNwYWNpbmdUb3AiLCJ0aXRsZSIsInRleHQiLCJzZXJpZXMiLCJuYW1lIiwiZGF0YSIsInBvaW50UGFkZGluZyIsInBvaW50UGxhY2VtZW50IiwicGxvdE9wdGlvbnMiLCJncm91cFBhZGRpbmciLCJsZWdlbmQiLCJhbGlnbiIsInN5bWJvbFJhZGl1cyIsInZlcnRpY2FsQWxpZ24iLCJ4IiwieSIsInJldmVyc2VkIiwieEF4aXMiLCJsYWJlbHMiLCJzdHlsZSIsIndoaXRlU3BhY2UiLCJjYXRlZ29yaWVzIiwidGlja0xlbmd0aCIsInlBeGlzIiwidXNlSFRNTCIsIm92ZXJmbG93IiwibWluIiwibWF4IiwidGlja0Ftb3VudCIsImNyZWRpdHMiLCJlbmFibGVkIiwidG9vbHRpcCIsInNoYWRvdyIsInBhZGRpbmciLCJyZXNwb25zaXZlIiwicnVsZXMiLCJjb25kaXRpb24iLCJtYXhXaWR0aCIsImNoYXJ0T3B0aW9ucyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwiZG9jdW1lbnQiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBT0EsU0FBQUEsaUJBQ0FDLFdBQUFDLE1BQUEsaUNBQUEsQ0FDQUEsTUFBQSxDQUNBQyxLQUFBLE1BQ0FDLFlBQUEsRUFDQUMsY0FBQSxHQUNBQyxhQUFBLElBQ0FDLFlBQUEsRUFDQUMsV0FBQSxJQUVBQyxNQUFBLENBQ0FDLEtBQUEsTUFFQUMsT0FBQSxDQUFBLENBQ0FDLEtBQUEsa0JBQ0FDLEtBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxHQUFBLEtBQUEsS0FBQSxJQUFBLEtBQUEsTUFDQUMsY0FBQSxHQUNBQyxnQkFBQSxLQUNBLENBQ0FILEtBQUEsVUFDQUMsS0FBQSxFQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxJQUFBLEtBQ0FDLGFBQUEsR0FDQUMsZUFBQSxLQUdBQyxZQUFBLENBQ0FMLE9BQUEsQ0FDQU0sYUFBQSxLQW9CQUMsT0FBQSxDQUNBQyxNQUFBLFFBQ0FDLGFBQUEsRUFDQUMsY0FBQSxNQUNBQyxFQUFBLEdBQ0FDLEdBQUEsR0FDQUMsVUFBQSxHQUdBQyxNQUFBLENBQ0FDLE9BQUEsQ0FDQUMsTUFBQSxDQUNBQyxXQUFBLFdBT0FDLFdBQUEsQ0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsS0FBQSxNQUNBQyxXQUFBLEdBR0FDLE1BQUEsQ0FDQXRCLE9BQUEsRUFDQWlCLE9BQUEsQ0FDQU0sU0FBQSxFQUNBQyxTQUFBLFNBS0FDLEtBQUEsR0FDQUMsSUFBQSxHQUNBQyxXQUFBLEdBR0FDLFFBQUEsQ0FDQUMsU0FBQSxHQUVBQyxRQUFBLENBQ0FDLFFBQUEsRUFDQUMsUUFBQSxJQUtBQyxXQUFBLENBQ0FDLE1BQUEsQ0FBQSxDQUNBQyxVQUFBLENBQ0FDLFNBQUEsS0FFQUMsYUFBQSxDQUNBNUMsTUFBQSxDQUNBSSxhQUFBLElBRUFZLE9BQUEsQ0FDQUMsTUFBQSxPQUNBRyxHQUFBLEdBRUFpQixRQUFBLENBQ0FELFNBQUEsU0FuSEFyQyxXQUFBOEMsV0FBQSxDQUNBQyxLQUFBLENBQ0FDLGFBQUEsT0F5SEEsYUFBQUMsU0FBQUMsWUFBQSxnQkFBQUQsU0FBQUMsV0FDQW5ELGlCQUVBa0QsU0FBQUUsaUJBQUEsbUJBQUFwRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiSGlnaGNoYXJ0cy5zZXRPcHRpb25zKHtcbiAgICBsYW5nOiB7XG4gICAgICB0aG91c2FuZHNTZXA6ICcsJ1xuICAgIH1cbn0pO1xuXG5cbmZ1bmN0aW9uIGRyYXdIaWdoY2hhcnRzKCkge1xuICAgIEhpZ2hjaGFydHMuY2hhcnQoXCJjaGFydC1jb250YWluZXItamFudWFyeS1zdG9ja3NcIiwgeyAvLyBhZGQgdGhlIHByb3BlciBJRCBoZXJlXG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICB0eXBlOiAnYmFyJyxcbiAgICAgICAgICAgIHN0eWxlZE1vZGU6IHRydWUsXG4gICAgICAgICAgICBzcGFjaW5nQm90dG9tOiAyNSxcbiAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTAwLFxuICAgICAgICAgICAgc3BhY2luZ0xlZnQ6IDAsXG4gICAgICAgICAgICBzcGFjaW5nVG9wOiAyMFxuICAgICAgICB9LCBcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIHRleHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgbmFtZTogJ0ZpbmFsIDExIG1vbnRocycsXG4gICAgICAgICAgICBkYXRhOiBbMjkuOSw1LjcsLTM0LjUsMzUsMTcuMSwxNS41LDIuNSwxNS40LDE2LjRdLFxuICAgICAgICAgICAgcG9pbnRQYWRkaW5nOiAtLjQsXG4gICAgICAgICAgICBwb2ludFBsYWNlbWVudDogLS4xNVxuICAgICAgICB9LHtcbiAgICAgICAgICAgIG5hbWU6ICdKYW51YXJ5JyxcbiAgICAgICAgICAgIGRhdGE6IFstMi43LC0yLjUsLTYuMSwtOC42LC0zLjcsLTMuNiwtMy4xLC01LjEsLS4yLC0xLjFdLFxuICAgICAgICAgICAgcG9pbnRQYWRkaW5nOiAuMixcbiAgICAgICAgICAgIHBvaW50UGxhY2VtZW50OiAuMiBcbiAgICAgICAgfV0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xXG4gICAgICAgICAgICB9IFxuICAgICAgICB9LFxuICAgICAgICAvLyBmb3IgbGluZSBjaGFydHMgb25seVxuICAgICAgICAvLyBwbG90T3B0aW9uczoge1xuICAgICAgICAvLyAgICAgc2VyaWVzOiB7XG4gICAgICAgIC8vICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAvLyAgICAgICAgIC8vIGNsaXA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAvLyAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgc3ltYm9sOiAnY2lyY2xlJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6ICcjZmZmZmZmJ1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9LFxuICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgIGFsaWduOiAncmlnaHQnLFxuICAgICAgICAgICAgc3ltYm9sUmFkaXVzOiAwLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICB4OiAxMCxcbiAgICAgICAgICAgIHk6IC0xMCxcbiAgICAgICAgICAgIHJldmVyc2VkOiB0cnVlXG4gICAgICAgICAgICAvLyBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB4QXhpczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC8vIGVkaXRzIHhBeGlzIHRpY2tzXG4gICAgICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgd2VlazogJyViLiAlZScsXG4gICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXRlZ29yaWVzOiBbMjAwMywyMDA1LDIwMDgsMjAwOSwyMDEwLDIwMTQsMjAxNSwyMDE2LDIwMjAsMjAyMV0sXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA1LFxuICAgICAgICAgICAgLy8gdGlja0ludGVydmFsOiAyNCAqIDM2MDAgKiAxMDAwICogN1xuICAgICAgICB9LFxuICAgICAgICB5QXhpczoge1xuICAgICAgICAgICAgdGl0bGU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgdXNlSFRNTDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2FsbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3JtYXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gSGlnaGNoYXJ0cy5udW1iZXJGb3JtYXQodGhpcy52YWx1ZSwwLCcuJywnLCcpO1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaW46IC00MCxcbiAgICAgICAgICAgIG1heDogNDAsXG4gICAgICAgICAgICB0aWNrQW1vdW50OiA5LFxuICAgICAgICAgICAgLy8gYWRkcyBjb21tYXMgdG8gdGhvdXNhbmRzXG4gICAgICAgIH0sXG4gICAgICAgIGNyZWRpdHM6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgIHNoYWRvdzogZmFsc2UsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIC8vIHZhbHVlU3VmZml4OiAnJyxcbiAgICAgICAgICAgIC8vIHZhbHVlUHJlZml4OiAnJyxcbiAgICAgICAgICAgIC8vIHZhbHVlRGVjaW1hbHM6IDIsXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNpdmU6IHtcbiAgICAgICAgICAgIHJ1bGVzOiBbe1xuICAgICAgICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgICAgICAgICAgbWF4V2lkdGg6IDUwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoYXJ0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgICAgICAgICAgICAgIHg6IC04LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgZHJhd0hpZ2hjaGFydHMoKTtcbn0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZHJhd0hpZ2hjaGFydHMpO1xufSJdfQ==
